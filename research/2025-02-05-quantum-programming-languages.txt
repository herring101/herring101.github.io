2:I[379605,["605","static/chunks/605-b9bed30daa442d92.js","797","static/chunks/app/research/%5Bslug%5D/page-0ea9551a323e2a70.js"],""]
4:I[129261,[],""]
6:I[756675,[],""]
7:I[618379,["605","static/chunks/605-b9bed30daa442d92.js","757","static/chunks/757-753e2d1f9a9d748b.js","101","static/chunks/101-7e0644fdb4ca956f.js","185","static/chunks/app/layout-a2088f4d768901d7.js"],"Providers"]
8:I[795861,["605","static/chunks/605-b9bed30daa442d92.js","757","static/chunks/757-753e2d1f9a9d748b.js","101","static/chunks/101-7e0644fdb4ca956f.js","185","static/chunks/app/layout-a2088f4d768901d7.js"],"MainNav"]
5:["slug","2025-02-05-quantum-programming-languages","d"]
0:["xTuAIHWozNrWqdvyZpAzI",[[["",{"children":["research",{"children":[["slug","2025-02-05-quantum-programming-languages","d"],{"children":["__PAGE__?{\"slug\":\"2025-02-05-quantum-programming-languages\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["research",{"children":[["slug","2025-02-05-quantum-programming-languages","d"],{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"container mx-auto py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"量子回路ベースではない量子プログラミング言語の詳細調査"}],["$","div",null,{"className":"flex items-center gap-4 mb-4","children":[["$","time",null,{"className":"text-muted-foreground","children":"2025/2/5"}],["$","div",null,{"className":"flex gap-2 flex-wrap","children":[["$","$L2","量子プログラミング",{"href":"/research/tags/%E9%87%8F%E5%AD%90%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:scale-105 transition-transform","children":"量子プログラミング"}]}],["$","$L2","関数型プログラミング",{"href":"/research/tags/%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:scale-105 transition-transform","children":"関数型プログラミング"}]}],["$","$L2","言語設計",{"href":"/research/tags/%E8%A8%80%E8%AA%9E%E8%A8%AD%E8%A8%88","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:scale-105 transition-transform","children":"言語設計"}]}],["$","$L2","量子計算",{"href":"/research/tags/%E9%87%8F%E5%AD%90%E8%A8%88%E7%AE%97","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:scale-105 transition-transform","children":"量子計算"}]}]]}]]}],["$","p",null,{"className":"text-xl text-muted-foreground","children":"量子回路ベースではない量子プログラミング言語（QLISP, Silq, Quipper, QMLなど）の特徴や利点を詳しく解説。従来の量子ゲートレベルのプログラミングとの違いや、抽象的な量子計算の記述方法を探る。"}]]}],["$","div",null,{"className":"prose prose-lg dark:prose-invert max-w-none","children":"$L3"}]]}],null]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","research","children","$5","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/acdaad1d23646914.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","research","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_d65c78 __variable_43fb55 min-h-screen bg-background font-sans antialiased","children":["$","$L7",null,{"children":["$","div",null,{"className":"relative flex min-h-screen flex-col","children":[["$","header",null,{"className":"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60","children":["$","div",null,{"className":"container flex h-14 items-center max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8","children":["$","$L8",null,{}]}]}],["$","main",null,{"className":"flex-1 container max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fb5b4266691f1591.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
3:[["$","h1",null,{"children":"量子回路モデルに依存しない量子プログラミング言語の調査"}],"\n",["$","h2",null,{"children":"1. 量子回路モデルに依存しない量子プログラミング言語"}],"\n",["$","p",null,{"children":"量子回路（ゲート列）を直接記述するのではなく、より高い抽象度で量子計算を表現できる言語が提案されています。代表的なものに、QLISP、Silq、Quipper、QML、Lambda-Q、Proto-Quipperなどがあります。"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"QLISP"}],"（Quantum Lisp）：Common Lispへの拡張として開発された量子計算シミュレータです。2006年にBrecht Desmetらによって提案され、量子計算を",["$","strong",null,{"children":"数学的な線形代数の形式"}],"で直接記述できます ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=First%2C%20the%20simulator%20has%20the,abstraction%20techniques%20of%20Lisp%20which%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=First%2C%20the%20simulator%20has%20the,abstraction%20techniques%20of%20Lisp%20which)","children":"^1"}]," 例えば、内部的には量子レジスタの状態を振幅のベクトル（行列）として保持し、ユーザはその振幅に直接アクセス・操作できます ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=in%20terms%20of%20mathematical%20concepts,direct%20access%20to%20the%20internal%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=in%20terms%20of%20mathematical%20concepts,direct%20access%20to%20the%20internal)","children":"^2"}]," これは高レベルな量子演算子を基本ゲートへ分解する従来手法と対照的で、",["$","strong",null,{"children":["ハダマード行列",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","msup",null,{"children":[["$","mi",null,{"children":"H"}],["$","mrow",null,{"children":[["$","mo",null,{"children":"⊗"}],["$","mi",null,{"children":"n"}]]}]]}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"H^{\\otimes n}"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.7713em"}}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.08125em"},"children":"H"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.7713em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":[["$","span",null,{"className":"mord mtight","children":"⊗"}],["$","span",null,{"className":"mord mathnormal mtight","children":"n"}]]}]}]]}]}]}]}]}]]}]]}]}]]}],"を適用して",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"n"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"n"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","children":"n"}]]}]}]]}],"量子ビットを一度にスーパーポジションに初期化"]}],"するといった操作を簡潔に表現できます ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=Op%02tionally%2C%20one%20can%20define%20a,of%20dimension%201%20%C3%97%202%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=Op%02tionally%2C%20one%20can%20define%20a,of%20dimension%201%20%C3%97%202)","children":"^3"}],"  ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=The%20mathematical%20meaning%20of%20H%E2%8A%97n,4%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=The%20mathematical%20meaning%20of%20H%E2%8A%97n,4)","children":"^4"}]," QLISPでは量子状態をランタイムに観察・変更することも可能で（物理的には許されませんがシミュレータ上では可能）、教育的プラットフォームとして柔軟性があります ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=First%2C%20the%20simulator%20has%20the,abstraction%20techniques%20of%20Lisp%20which%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=First%2C%20the%20simulator%20has%20the,abstraction%20techniques%20of%20Lisp%20which)","children":"^1"}]," 歴史的には、まだ実機のない時代に",["$","strong",null,{"children":"量子プログラミングの教育・実験用"}],"として登場した経緯があります。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Silq"}],"：ETHチューリッヒのVechev教授らが2020年に発表した",["$","strong",null,{"children":"高水準の量子プログラミング言語"}],"です [^5] Silqはハードウェアのゲート実装から離れ、アルゴリズムを直感的に記述することを重視しています [^6]  [^7] 最大の特徴は**「安全な自動アンコンピュテーション」",["$","strong",null,{"children":"です。量子計算では、一時変数をそのまま捨てると量子状態が崩壊してしまうため、通常は不要になった計算結果を"}],"逆演算で消去（uncompute）**する必要があります。Silqでは型システムとコンパイラがこれを自動で挿入し、プログラマが逐一アンコンピュートする煩雑さを解消しました [^5] 型システムは線形型に似た拡張（",["$","code",null,{"children":"qfree"}],"や",["$","code",null,{"children":"!"}],"注釈など）を持ち、",["$","strong",null,{"children":"古典データと量子データを区別"}],"して非物理的な操作を静的に排除します [^8]  [^9] その結果、Silqのコードは他の言語（例えばQ#やQuipper）に比べて約3～4割短く、使用する量子基本操作も半分程度になるという報告があります [^10] 設計思想として、「量子ハードウェアではなくプログラマの思考」に言語を合わせることを掲げており [^11] 従来の言語（Q#やQiskitなど）が低レベルの回路記述に近かったのに対し、",["$","strong",null,{"children":"Silqはアルゴリズムを直接表現できる構文と安全性"}],"を提供します。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Quipper"}],"：2013年にAlexander GreenやPeter Selingerらが発表した、関数型（関数型DSL）量子プログラミング言語です [^12] Haskell上に埋め込み言語として実装され、",["$","strong",null,{"children":"高階関数や遅延評価"}],"を活用して",["$","strong",null,{"children":"大規模な量子回路を生成・操作"}],"できます [^13] Quipperは「研究論文でアルゴリズムを記述するのと同程度の抽象度で量子アルゴリズムを書き、それをゲートレベルまでコンパイルする」ことを目標としています [^14] 特徴として、手続き型と宣言型スタイルを柔軟に混在できる構文、高レベルな",["$","strong",null,{"children":"回路合成オペレータ"}],"（回路断片を結合・変形する操作子）を備えます [^15] たとえば",["$","strong",null,{"children":"古典関数からの可逆回路自動生成"}],"が可能で、古典的なアルゴリズムを記述すると対応する量子回路（可逆計算）が自動で構成されます [^16] また階層化回路・量子データ型・回路変換器など高度な仕組みも提供されます [^16]  [^17] Quipper自体はハードウェア非依存で、出力された回路は将来的な量子デバイスにマップ可能です [^18] 実際、Quipperには7つの非自明な量子アルゴリズム（Boolean formulaアルゴリズムや量子ウォーク、数論アルゴリズムなど）の実装が含まれており、",["$","strong",null,{"children":"兆個規模のゲート"}],"を持つ回路も扱える高いスケーラビリティを示しました [^13]  [^19] 設計思想は「量子回路のための関数型言語」であり、形式的な解析（型検査やリソース見積もり）にも適しています [^20]"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"QML"}],"：2005年にThorsten AltenkirchとJonathan Grattageが提案した",["$","strong",null,{"children":"関数型量子プログラミング言語"}],"です [^21] 有限個の型（有限次元）の上で動作する一階関数型言語で、背後にカテゴリー理論に基づく意味論を持ちます [^21]  [^22] 特徴は、",["$","strong",null,{"children":"可逆（ユニタリ）な計算と不可逆（測定を含む）な計算を単一の言語に統合"}],"している点です [^23] 線形論理に由来する",["$","strong",null,{"children":"厳密線形型（strict linear logic）の型システム"}],"を採用し、量子ビットを使い捨てたりコピーしたりする操作（弱化や収縮）を明示的に管理します [^23] この制約下で書かれたプログラムはデコヒーレンスを起こさず、重ね合わせやエンタングルメントを保ったまま計算できます [^24] さらに特徴的なのは、",["$","strong",null,{"children":"量子データだけでなく量子制御構造を持てる"}],"ことです。QMLでは古典的な",["$","code",null,{"children":"if"}],"文に相当する条件分岐に量子ビットを用いることができ、例えば「if ◦x then ... else ...」のような構文で",["$","strong",null,{"children":["量子ビット",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"x"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"x"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","children":"x"}]]}]}]]}],"が|0>か|1>かに応じて結果がスーパーポジションとして得られる"]}],"処理を記述できます [^25] これは制御ビットが重ね合わせ状態にある場合に",["$","strong",null,{"children":"両方の分岐を同時に実行する"}],"ことを意味し、量子並列性を高レベルに表現するものです [^26] QMLはその意味論から",["$","strong",null,{"children":"スーパーオペレーターによる記述と回路へのコンパイル"}],"の両方をサポートし [^22]  [^27] 古典プログラミングの高級言語に近い感覚で量子アルゴリズムを記述できる初期の試みでした。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Lambda-Q（量子ラムダ計算）"}],"：量子計算を記述するためのラムダ計算拡張です。Philip Mayminが1996年に",["$","strong",null,{"children":"lambda-q計算"}],"を提案し、任意の量子計算を記述できる強力なモデルを示しました [^28] Mayminのラムダ計算では確率的・量子的な計算をラムダ項で表現可能でしたが、NP完全問題を効率的に解けてしまうなど",["$","strong",null,{"children":"物理的な量子計算より強力"}],"であることが指摘され [^28] 現実の量子コンピュータで実装可能かは疑問とされています [^29] その後、2003年にAndré van Tonderが量子ラムダ計算の改良版を提案し、古典的な制御を持つ量子ラムダ計算を定義するとともにScheme実装を示しました [^30] ラムダ計算ベースの言語は量子回路とは異なる計算モデルを提供し、",["$","strong",null,{"children":"理論的には回路モデルと同等の計算能力"}],"を持つことが示されています [^31] Lambda-Q自体は主に理論枠組みですが、関数型言語の持つ合成可能性や高階関数を量子計算に取り込む先駆けとなりました。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Proto-Quipper"}],"：Quipperの設計を形式的に洗練するために開発された",["$","strong",null,{"children":"実験的サブ言語群"}],"です。Peter Selingerらのグループによって提案され、Quipperの一部機能に対応した複数のバリアントがあります [^32] 例えば",["$","strong",null,{"children":"Proto-Quipper-S"}],"は線形型システムとサブタイプを備えた言語、",["$","strong",null,{"children":"Proto-Quipper-M"}],"はサブタイプなしの線形型と言語学的意味論（カテゴリー意味論）を持つ言語、",["$","strong",null,{"children":"Proto-Quipper-D"}],"は線形依存型を導入した言語です [^32]  [^33] Proto-Quipperでは、回路生成時と回路実行時の二相の区別や、古典データと量子データの厳密な型分離（パラメータ型と量子状態型）など、Quipperの特徴を小さなコア言語で明示的に扱います [^34] 例えば、古典的に既知で複製・破棄可能な型（NatやBoolなど）と、量子的で線形性を持つ型を区別しつつ、それらを組み合わせた複合型も定義可能にしています [^35] これは",["$","strong",null,{"children":"量子プログラムの型安全性とリソース（回路サイズ）解析"}],"のための理論的基盤を与え、将来的により安全な量子言語の設計に寄与します [^32] Proto-Quipper自体はユーザが直接アルゴリズム開発に使うというより、",["$","strong",null,{"children":"量子プログラミング言語を形式的に研究するためのフレームワーク"}],"と位置付けられます。"]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"children":"2. 量子回路ベースではないプログラミングアプローチ"}],"\n",["$","h3",null,{"children":"量子関数型プログラミングの可能性"}],"\n",["$","p",null,{"children":["関数型プログラミングのパラダイムは、量子計算との親和性が指摘されています。副作用の少ない計算モデルや高階関数による抽象化は、量子アルゴリズムを",["$","strong",null,{"children":"数学的関数や合成可能な変換"}],"として捉えることを可能にします。実際、QuipperやQMLのように",["$","strong",null,{"children":"関数（ケティング操作）をファーストクラス市民"}],"として扱い、関数合成＝回路の直列接続、関数の直積＝回路の並列といった形で量子回路をモデル化できます。関数型言語では",["$","strong",null,{"children":"線形型"}],"を導入することで、量子ビットの重ね合わせ状態を扱いつつ不正なコピーを防ぐことができます。例えばQMLでは線形型で量子状態の使い捨てを制限し、Silqでも型システムで重ね合わせの有無を追跡しています [^8]  [^9] 関数型アプローチでは、",["$","strong",null,{"children":"量子プログラムを数理的に解析"}],"したり、関数の等価変換でアルゴリズムを最適化したりしやすい利点があります。また",["$","strong",null,{"children":"高階関数"}],"により、他の関数（=サブ回路）を引数に取るような汎用的な量子演算（例えばマップやフォールドに相当する回路操作）も記述可能です。これは量子アルゴリズムを部品化・再利用する上で有用です。"]}],"\n",["$","h3",null,{"children":"量子命令型プログラミングとの違い"}],"\n",["$","p",null,{"children":["量子命令型（インペラティブ）プログラミングは、古典プログラミングと同様に",["$","strong",null,{"children":"状態と逐次命令"}],"に焦点を当てます。典型的には、プログラマはレジスタ上の量子ビットに順次ゲートを適用し、条件分岐やループで制御構造を作ります（QiskitやCirq、QCLなどが該当）。このモデルでは",["$","strong",null,{"children":"現在の量子状態を破壊的に更新"}],"する形でプログラムが進行します。一方、量子関数型では",["$","strong",null,{"children":"状態の変化を関数適用として表現"}],"し、中間状態に明示的な名前を付けないことも多いです。命令型では可読性のために変数に量子ビットを束縛しますが、関数型ではラムダ計算のように直接関数の入出力として量子ビット（あるいは量子レジスタ）を扱います。違いとして、",["$","strong",null,{"children":"可逆性の扱い"}],"があります。命令型ではプログラマが自ら一時変数をアンコンピュートしたり、不要ビットを測定して0にリセットしたりといったリソース管理を行う必要があります。一方関数型では、",["$","strong",null,{"children":"不要になった中間結果は参照がなくなることで自動的に解放"}],"されますが、それが物理的に安全にできるかを型で保証するアプローチ（Silqのように）や、コンパイル時に",["$","strong",null,{"children":"Bennettの法則"}],"に従って自動で逆演算を挿入するアプローチが取られています [^5]  [^36] また、量子命令型では古典制御と量子操作のインターリーブが自由にできる半面、",["$","strong",null,{"children":"量子ビットを含む条件分岐（量子制御フロー）は基本的に禁止"}],"されます（重ね合わせのままでは",["$","code",null,{"children":"if"}],"できないため、測定が必要）。これに対し関数型・宣言型の一部言語（QMLなど）は",["$","strong",null,{"children":"量子制御を言語レベルで許容"}],"し、その代わりに裏でそれをユニタリ回路に変換する工夫を凝らしています [^26] 総じて、関数型は高レベルの抽象化と安全性を提供し、命令型はハードウェア実装を意識した細かな制御が可能という違いがあります。"]}],"\n",["$","h3",null,{"children":"宣言型アプローチや確率論的プログラミングの活用"}],"\n",["$","p",null,{"children":["量子計算を「どう計算するか」ではなく「",["$","strong",null,{"children":"何を求めるか"}],"」で記述する宣言型の試みも存在します。例えば、量子プログラムの",["$","strong",null,{"children":"論理的性質"}],"を記述・検証するための動的論理（Dynamic Logic of Quantum Programs, LQP）や、ダイクストラのガード付きコマンド言語を量子版に拡張したqGCL [^37] どがあります。qGCLでは量子プログラムの推論規則を与え、プログラムを**数学的な論理式（前後条件）**として記述するアプローチを取ります。これらは直接実行するというより、",["$","strong",null,{"children":"仕様記述やモデル検査"}],"に用いられる宣言的手法です。"]}],"\n",["$","p",null,{"children":["また、量子プログラムは確率的な振る舞い（測定によるランダム性）を伴うため、確率的プログラミングの考え方が参考になります。確率的プログラミングでは分布やランダム変数を一級の値として操作しますが、量子では確率に加えて",["$","strong",null,{"children":["位相（複素位相）",["$","strong",null,{"children":"が重要です。そのため直接の適用は難しいものの、「測定結果の確率分布」を記述・推論するには確率的アプローチが有用です。例えば量子アルゴリズムの正当性を示すのに、確率的プログラミングのように"}],"望む結果が一定以上の確率で得られる"]}],"ことを論じたりできます。さらには、将来的に",["$","strong",null,{"children":"量子プログラム合成"}],"において、宣言型に「この問題を解く量子アルゴリズムを求めよ」と指定し、システムが自動で適切な量子回路を生成する、といった研究も考えられます。現状、量子言語で純粋な宣言型は主流ではありませんが、一部に量子Prologのような論理プログラミング的試みや、ハイブリッド量子古典最適化問題（QUBO）を記述するための宣言的フレームワークなども検討されています。"]}],"\n",["$","h2",null,{"children":"3. 量子ゲートレベルではなく高レベルで量子計算を記述する方法"}],"\n",["$","h3",null,{"children":"高レベル抽象化を提供する言語の特徴"}],"\n",["$","p",null,{"children":["高レベル抽象化を提供する言語では、量子ビットやゲートの詳細に踏み込まずにアルゴリズムの本質を記述できます。例えばSilqやQuipperでは、",["$","strong",null,{"children":"古典的なデータ構造（配列や数値）や制御構造（ループ、条件）をそのまま使用"}],"して量子アルゴリズムを表現できます [^38] Silqでは変数を宣言し（",["$","code",null,{"children":"q := 0;"}]," で|0>状態の量子ビットを割り当て）、古典的な変数と同様にスコープから外れれば自動的に解放されます。その際に量子ビットであれば暗黙にアンコンピュート処理が行われます [^5] QuipperではHaskellの関数を使って回路を組み立てるため、再帰や高階関数、リスト操作など",["$","strong",null,{"children":"抽象度の高い構成"}],"が可能です。例えば大きなアルゴリズムを複数のサブアルゴリズム（サブルーチン）に分割し、それぞれを関数として定義してから組み合わせる、といったモジュール化ができます。このような言語は、",["$","strong",null,{"children":"アルゴリズムの意図をコード上で追いやすい"}],"利点があります。アルゴリズム設計者は量子フーリエ変換やオラクル関数といった大きな単位で考え、その部分は言語が提供するライブラリ関数や高水準構文で記述し、細部のゲート構成はコンパイラやライブラリに任せることができます。"]}],"\n",["$","p",null,{"children":["さらに、高レベル言語の多くは",["$","strong",null,{"children":"型システムによる抽象化"}],"も特徴です。型で量子ビットや古典ビット、あるいは可逆関数かどうかを区別し、誤用を防ぎます。例えばProto-QuipperやSilqでは型レベルで「この関数は量子操作を含まない（",["$","code",null,{"children":"qfree"}],"）」等を示せ [^39] そうした関数については自動でアンコンピュートする、などコンパイラが最適化やチェックを行います。これは",["$","strong",null,{"children":"抽象度を上げつつも物理法則に反しない"}],"プログラミングを支援するものです。"]}],"\n",["$","h3",null,{"children":"量子アルゴリズム記述の具体例"}],"\n",["$","p",null,{"children":["高レベル言語を使うと、Groverの探索やShorの素因数分解アルゴリズムといった有名な量子アルゴリズムも、論文に近い形で記述できます。例えば",["$","strong",null,{"children":"Groverのアルゴリズム"}],"では、標準的な手順は「全状態のスーパーポジションを用意→オラクル関数でマーク→位相反転→拡散変換」という流れですが、Quipperの場合、あらかじめ用意された拡散変換（",["$","strong",null,{"children":"Grover拡散オペレータ"}],"）をライブラリから呼び出し、オラクルも問題に応じて古典関数として書き、それを自動可逆化することで実装できます。Silqであれば、リストから特定要素を探す操作をループで書き、その中で量子並列性を活かす部分（条件チェックのオラクルなど）だけを量子計算にし、残りは古典的に記述するといった融合も可能です。",["$","strong",null,{"children":"Shorのアルゴリズム"}],"では特に大きな整数のmod演算やべき乗計算など古典計算部分が多いですが、高級言語ではこれらを",["$","strong",null,{"children":"そのまま古典コードとして書き"}],"、コンパイラが必要な可逆回路に変換してくれます [^16] Quipperでは実際に、Shorのアルゴリズムのコアとなる**modular exponentiation（累乗計算）**を古典的アルゴリズムとして実装し、それを自動で量子回路化することに成功しています（さらに必要な量子フーリエ変換などはライブラリ関数で提供） [^17]"]}],"\n",["$","p",null,{"children":["もう一つの例として、",["$","strong",null,{"children":"Deutsch-Jozsaアルゴリズム"}],"や",["$","strong",null,{"children":"ベル状態の生成"}],"を挙げます。Quipperのコードでは、ベル状態生成は次のように書けます："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-haskell","children":"plus_minus :: Bool -> Circ Qubit\nplus_minus b = do\n    q <- qinit b         -- ブール値bに対応する|0>または|1>の量子ビットを準備\n    had q                -- アダマール(H)を適用して (|0>+|1>)/√2 または (|0>-|1>)/√2 を作る\n    return q\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-haskell","children":"share :: Qubit -> Circ (Qubit, Qubit)\nshare q = do\n    r <- qinit False     -- 補助の|0>ビットを用意\n    q `controlled` qnot r  -- qをコントロールビットとしてrにCNOTを適用（エンタングル）\n    return (q, r)\n}\n"}]}],"\n",["$","p",null,{"children":["このように、まず",["$","code",null,{"children":"plus_minus False"}],"で|+>状態を作り、それを",["$","code",null,{"children":"share"}],"に渡すことで2量子ビットのエンタングル状態（ベル状態",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","msup",null,{"children":[["$","mi",null,{"mathvariant":"normal","children":"Φ"}],["$","mo",null,{"children":"+"}]]}],["$","mo",null,{"stretchy":"false","children":"⟩"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"|\\Phi^+\\rangle"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.0213em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord","children":"Φ"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.7713em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mbin mtight","children":"+"}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mclose","children":"⟩"}]]}]}]]}],"）が得られます [^40]  [^41] ここで注目すべきは、Quipperでは",["$","strong",null,{"children":"コントロール付きオペレーション"}],"も簡潔に表現できる点です。上記ではバッククォート構文と",["$","code",null,{"children":"controlled"}],"関数により、",["$","code",null,{"children":"qnot"}],"（NOTゲート）を量子ビット",["$","code",null,{"children":"q"}],"で制御して",["$","code",null,{"children":"r"}],"に適用しています [^41] 低レベルでCNOTゲートを指定する代わりに、",["$","strong",null,{"children":"既存の関数を制御版に変換"}],"する高レベル操作子を使えるわけです。高レベル言語ではこのように",["$","strong",null,{"children":"抽象的な操作の組み合わせ"}],"でアルゴリズムを書けるため、例えば「2進木上の量子ウォークアルゴリズム」 [^19] ど複雑なアルゴリズムでも、構造を見通したコードになります。"]}],"\n",["$","h3",null,{"children":"量子状態の直接的な操作とその利点"}],"\n",["$","p",null,{"children":["高水準言語の一部やシミュレータ環境では、量子状態ベクトルを直接操作することも可能です。QLISPは特にこの点に優れ、量子レジスタ生成時に",["$","strong",null,{"children":"任意の初期状態を与えるための高階関数"}],"を受け取れます ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=in%20terms%20of%20mathematical%20concepts,direct%20access%20to%20the%20internal%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=in%20terms%20of%20mathematical%20concepts,direct%20access%20to%20the%20internal)","children":"^2"}]," 例えば、",["$","code",null,{"children":"(make-qureg 3 hadamard-init)"}],"とすれば3量子ビットを生成し、用意された",["$","code",null,{"children":"hadamard-init"}],"関数によって",["$","strong",null,{"children":"全てのビットにHを適用した状態"}],"（",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","msup",null,{"children":[["$","mi",null,{"children":"H"}],["$","mrow",null,{"children":[["$","mo",null,{"children":"⊗"}],["$","mn",null,{"children":"3"}]]}]]}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mn",null,{"children":"000"}],["$","mo",null,{"stretchy":"false","children":"⟩"}],["$","mo",null,{"children":"="}],["$","mfrac",null,{"children":[["$","mn",null,{"children":"1"}],["$","mrow",null,{"children":[["$","mn",null,{"children":"2"}],["$","msqrt",null,{"children":["$","mn",null,{"children":"2"}]}]]}]]}],["$","msub",null,{"children":[["$","mo",null,{"children":"∑"}],["$","mrow",null,{"children":[["$","mi",null,{"children":"x"}],["$","mo",null,{"children":"∈"}],["$","mo",null,{"stretchy":"false","children":"{"}],["$","mn",null,{"children":"0"}],["$","mo",null,{"separator":"true","children":","}],["$","mn",null,{"children":"1"}],["$","msup",null,{"children":[["$","mo",null,{"stretchy":"false","children":"}"}],["$","mn",null,{"children":"3"}]]}]]}]]}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"x"}],["$","mo",null,{"stretchy":"false","children":"⟩"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"H^{\\otimes 3}|000\\rangle = \\frac{1}{2\\sqrt{2}}\\sum_{x\\in\\{0,1\\}^3}|x\\rangle"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":[["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.0641em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.08125em"},"children":"H"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":[["$","span",null,{"className":"mord mtight","children":"⊗"}],["$","span",null,{"className":"mord mtight","children":"3"}]]}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mord","children":"∣000"}],["$","span",null,{"className":"mclose","children":"⟩"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":"="}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.3831em","verticalAlign":"-0.538em"}}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mopen nulldelimiter"}],["$","span",null,{"className":"mfrac","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.8451em"},"children":[["$","span",null,{"style":{"top":"-2.551em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":[["$","span",null,{"className":"mord mtight","children":"2"}],["$","span",null,{"className":"mord sqrt mtight","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.9128em"},"children":[["$","span",null,{"className":"svg-align","style":{"top":"-3em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"mord mtight","style":{"paddingLeft":"0.833em"},"children":["$","span",null,{"className":"mord mtight","children":"2"}]}]]}],["$","span",null,{"style":{"top":"-2.8728em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"hide-tail mtight","style":{"minWidth":"0.853em","height":"1.08em"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"400em","height":"1.08em","viewBox":"0 0 400000 1080","preserveAspectRatio":"xMinYMin slice","children":["$","path",null,{"d":"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.1272em"},"children":["$","span",null,{}]}]}]]}]}]]}]}]]}],["$","span",null,{"style":{"top":"-3.23em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"frac-line","style":{"borderBottomWidth":"0.04em"}}]]}],["$","span",null,{"style":{"top":"-3.394em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord mtight","children":"1"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.538em"},"children":["$","span",null,{}]}]}]]}]}],["$","span",null,{"className":"mclose nulldelimiter"}]]}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.1667em"}}],["$","span",null,{"className":"mop","children":[["$","span",null,{"className":"mop op-symbol small-op","style":{"position":"relative","top":"0em"},"children":"∑"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.2253em"},"children":["$","span",null,{"style":{"top":"-2.4003em","marginLeft":"0em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":[["$","span",null,{"className":"mord mathnormal mtight","children":"x"}],["$","span",null,{"className":"mrel mtight","children":"∈"}],["$","span",null,{"className":"mopen mtight","children":"{"}],["$","span",null,{"className":"mord mtight","children":"0"}],["$","span",null,{"className":"mpunct mtight","children":","}],["$","span",null,{"className":"mord mtight","children":"1"}],["$","span",null,{"className":"mclose mtight","children":[["$","span",null,{"className":"mclose mtight","children":"}"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.7463em"},"children":["$","span",null,{"style":{"top":"-2.786em","marginRight":"0.0714em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.5em"}}],["$","span",null,{"className":"sizing reset-size3 size1 mtight","children":["$","span",null,{"className":"mord mtight","children":"3"}]}]]}]}]}]}]}]]}]]}]}]]}]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.4747em"},"children":["$","span",null,{}]}]}]]}]}]]}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.1667em"}}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord mathnormal","children":"x"}],["$","span",null,{"className":"mclose","children":"⟩"}]]}]]}]]}],"）に初期化します [^42] このように、ゲート適用を逐次シミュレートする代わりに",["$","strong",null,{"children":"行列・ベクトル演算として一括適用"}],"できるため、数学的に状態を把握しやすくなります [^43] 利点として、アルゴリズムの結果となる状態を直接記述・検証できることが挙げられます。例えばQMLのプログラム例では、「入力ビットが真なら",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"f"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"l"}],["$","mi",null,{"children":"s"}],["$","mi",null,{"children":"e"}],["$","mo",null,{"stretchy":"false","children":"⟩"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"|qfalse\\rangle"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.03588em"},"children":"q"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10764em"},"children":"f"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.01968em"},"children":"l"}],["$","span",null,{"className":"mord mathnormal","children":"se"}],["$","span",null,{"className":"mclose","children":"⟩"}]]}]}]]}],"と",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mo",null,{"children":"−"}],["$","mn",null,{"children":"1"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"-1"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.7278em","verticalAlign":"-0.0833em"}}],["$","span",null,{"className":"mord","children":"−"}],["$","span",null,{"className":"mord","children":"1"}]]}]}]]}],"倍位相付きの",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"r"}],["$","mi",null,{"children":"u"}],["$","mi",null,{"children":"e"}],["$","mo",null,{"stretchy":"false","children":"⟩"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"|qtrue\\rangle"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord mathnormal","children":"qt"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"r"}],["$","span",null,{"className":"mord mathnormal","children":"u"}],["$","span",null,{"className":"mord mathnormal","children":"e"}],["$","span",null,{"className":"mclose","children":"⟩"}]]}]}]]}],"の重ね合わせ、偽なら",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"f"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"l"}],["$","mi",null,{"children":"s"}],["$","mi",null,{"children":"e"}],["$","mo",null,{"stretchy":"false","children":"⟩"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"|qfalse\\rangle"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.03588em"},"children":"q"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10764em"},"children":"f"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.01968em"},"children":"l"}],["$","span",null,{"className":"mord mathnormal","children":"se"}],["$","span",null,{"className":"mclose","children":"⟩"}]]}]}]]}],"と",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"r"}],["$","mi",null,{"children":"u"}],["$","mi",null,{"children":"e"}],["$","mo",null,{"stretchy":"false","children":"⟩"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"|qtrue\\rangle"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord mathnormal","children":"qt"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"r"}],["$","span",null,{"className":"mord mathnormal","children":"u"}],["$","span",null,{"className":"mord mathnormal","children":"e"}],["$","span",null,{"className":"mclose","children":"⟩"}]]}]}]]}],"の重ね合わせを返す」という形でHadamard変換を定義していました [^25] このように",["$","strong",null,{"children":"状態そのものを式として記述"}],"できると、連続してそれを適用した場合に元に戻る（Hを2回適用すると恒等になる）こともコードを見て理解できます [^25] 物理ハードウェア上では直接状態を書き換えることはできませんが、シミュレーション環境ではあえてそうすることで",["$","strong",null,{"children":"アルゴリズムの動作原理を確認"}],"したり、",["$","strong",null,{"children":"最適な回路を探索"}],"したりできます。例えば量子機械学習では目標の状態を与えてそれに近づく回路を変分的に見つける、という手法がありますが、この際にも高レベルから「目標状態」を指定できれば有用です。"]}],"\n",["$","p",null,{"children":["直接状態操作の利点は他にも、",["$","strong",null,{"children":"デバッグや可視化"}],"があります。QLISPのように内部の量子状態を観察できると、アルゴリズム途中での振幅や位相分布を調べられます ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=First%2C%20the%20simulator%20has%20the,abstraction%20techniques%20of%20Lisp%20which%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=First%2C%20the%20simulator%20has%20the,abstraction%20techniques%20of%20Lisp%20which)","children":"^1"}]," これは通常の量子計算では測定しないと見えない情報ですが、シミュレータならではの強みです。ただし、このような操作は実機では不可能であり、量子プログラムとしては破綻したものになるため、実際に動作させる際は注意が必要です。高レベル言語であっても",["$","strong",null,{"children":"物理的に許される操作のみを許容"}],"する（Silqのように）設計と、教育的用途で",["$","strong",null,{"children":"非物理的な操作も許す"}],"（QLISPのように）設計があり、目的に応じて使い分けられています。"]}],"\n",["$","h2",null,{"children":"4. 既存の量子プログラミングフレームワークとの比較"}],"\n",["$","h3",null,{"children":"QiskitやCirq、PyQuilとの比較"}],"\n",["$","p",null,{"children":["Qiskit（IBM）、Cirq（Google）、PyQuil（Rigetti）といったフレームワークは、主に",["$","strong",null,{"children":"量子回路を直接構築するためのライブラリ"}],"です。Pythonから利用でき、量子ビットの確保、ゲートの適用、測定といった操作を提供します。基本的には",["$","strong",null,{"children":"命令型"}],"のスタイルで、ユーザは逐次回路を組み立てます。例えばQiskitでは以下のように記述します。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-python","children":"qr = QuantumRegister(2)\ncr = ClassicalRegister(2)\ncircuit = QuantumCircuit(qr, cr)\ncircuit.h(qr[0])       # 0番目の量子ビットにHadamard\ncircuit.cx(qr[0], qr[1])  # CNOT: qr[0]を制御、qr[1]に適用\ncircuit.measure(qr, cr)   # 測定\n"}]}],"\n",["$","p",null,{"children":["このように",["$","strong",null,{"children":"ゲート単位"}],"で操作する点で、SilqやQuipperのような高レベル言語とはアプローチが異なります。フレームワークは実機ハードウェアや低レベル命令（OpenQASMやQuilアセンブリ）と連携することを重視しており、構築した回路を直接量子プロセッサ上で実行したり、ノイズシミュレータで試したりすることが容易です。一方、高レベル言語はまず",["$","strong",null,{"children":"アルゴリズム記述とその検証"}],"に重点があり、現段階では多くが研究用途で実機とのインターフェースは限定的です。例えばQuipperやQMLは実ハードへの実行機能を持ちません（Quipperは生成した回路を他の実行系に渡すことはできます）。Silqも現状ではシミュレータ上で動く言語であり、特定のハードウェアバックエンドとは結び付いていません。"]}],"\n",["$","h3",null,{"children":"量子コンパイラやシミュレーション環境の違い"}],"\n",["$","p",null,{"children":["フレームワーク（Qiskit等）は内部に",["$","strong",null,{"children":"量子コンパイラ/トランスパイラ"}],"を備え、ユーザが記述した回路をデバイス上で実行可能な形に最適化・変換します。例えばゲートの再配置、回路深さの短縮、ハードウェアに存在しないゲートの分解、量子ビットのマッピング（割り当て）などが自動で行われます。これに対し、高レベル言語のコンパイラは",["$","strong",null,{"children":"アルゴリズム記述を回路へ落とす"}],"ことが主な役割です。SilqやQMLのコンパイラは、プログラム中の高水準操作（ループや条件、関数呼び出しなど）を展開し、必要な量子ビット数やゲート列を生成します [^22] Quipperは埋め込み言語なので、Haskellプログラムを実行すると同時に回路構造が構築されます（その意味でコンパイルというより実行時生成）。最終的に出力される回路（ゲート列）に対して、ハード依存の最適化は施されないことが多く、別途Qiskit等に渡して最適化させることもあります。"]}],"\n",["$","p",null,{"children":["シミュレーション環境も差異があります。フレームワーク付属のシミュレータ（例えばQiskit AerやPyQuil QVM）は基本的に",["$","strong",null,{"children":"状態ベクトル"}],"や",["$","strong",null,{"children":"確率測定"}],"を高速に行うよう実装されています。一方QLISPのような研究プロトタイプは最適化に限界があり、ビット数が増えると計算量的に厳しい場合があります。ただ、高レベル言語のシミュレータは",["$","strong",null,{"children":"抽象度の高いデバッグ機能"}],"（例えば型違反の検出や、Silqのようにスコープアウトした量子変数の自動消去チェックなど）を持つことが多く、ユーザにとって安心感があります。"]}],"\n",["$","h3",null,{"children":"高レベル言語の利点と課題"}],"\n",["$","p",null,{"children":["高レベル言語の利点は何といっても",["$","strong",null,{"children":"開発生産性とコードの明瞭さ"}],"です。量子アルゴリズムの意図を直接コードに反映でき、複雑な回路でもコード行数を抑え直観的に書けます。Silqの評価では、従来言語に比べプログラムが短く読みやすいだけでなく、扱う量子基本操作（例えばHadamardやCNOTといった低レベル命令）の数も半減したとされています [^10] また、型システムや言語仕様によって",["$","strong",null,{"children":"量子の物理法則を違反するプログラムを未然に防止"}],"できるのも利点です [^8] 例えばSilqでは線形型的な制約で「量子ビットを重ね合わせのまま捨ててしまう」ようなコードはコンパイルエラーになります。QMLでも量子的な条件分岐を可能にする代わり、線形論理で安全性を確保しました [^23] さらに、Quipperのように関数型言語として定式化されている場合、",["$","strong",null,{"children":"プログラム変換や検証"}],"（等価変換、部分正当性の証明など）に数学的手法を適用しやすいです [^20] 実際、Proto-Quipperは形式的手法でプログラムの回路サイズ上界を導出する研究も行っています [^32]  [^44]"]}],"\n",["$","p",null,{"children":["課題としては、",["$","strong",null,{"children":"学習コストや普及度"}],"があります。QuipperやQMLはHaskellや線形論理といった高度な概念が背景にあるため、量子アルゴリズム専門の研究者であっても習得に時間がかかる場合があります。また、コミュニティとツールの成熟度でQiskit系に劣ります。現状、実機で実行するには結局回路に落としてから既存フレームワークに渡す必要があるため、",["$","strong",null,{"children":"統合開発環境として一貫して使うことが難しい"}],"側面もあります。例えばSilqで書いたコードを直接IBM QuantumやIonQのマシンで動かすことはできないので、中間表現への変換や結合コードを書く必要があります。さらに、最適化という点でも課題があります。高レベル言語は抽象的にコードを書く分、",["$","strong",null,{"children":"生成される回路がリソース的に効率的とは限らない"}],"場合があります。人間が手工芸的に最適化した回路と比べると、冗長な部分が出る可能性があります（もっとも、それを補うためにコンパイラ側で最適化アルゴリズムを入れる余地があります）。また、一部の高レベル言語は",["$","strong",null,{"children":"動的な量子プログラム"}],"（途中で測定して結果に応じ回路を変える等）に弱いケースもあります。例えばQMLは基本的に静的な回路しか表現できませんし、Quipperも量子回路自体は静的構造です（ただし古典コンピュータで動的に回路を組み立てることはできます [^45] 。対照的にQiskitやCirqでは実行中にクラシカルな条件分岐を挿入でき（ループ内で測定結果によって次の操作を変更するなど）、ハードウェアもそれをサポートしつつあります。高レベル言語がこの動的適応に対応するには、更なる言語拡張やモデル化が必要でしょう。"]}],"\n",["$","h2",null,{"children":"5. 実際のコード例と応用"}],"\n",["$","h3",null,{"children":"各言語のサンプルコード"}],"\n",["$","p",null,{"children":"ここでは挙げてきた言語の簡単なコード例を示します。それぞれの文法や特徴が垣間見えるようなものを選びます。"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"QLISP（Quantum Lisp）"}],": QLISPはCommon Lispベースなのでプレフィックス表記です。例えば3量子ビットをハダマードで初期化するには以下のように書けます。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-lisp","children":"(defparameter *q* (make-qureg 3 'hadamard-init))\n"}]}],"\n",["$","p",null,{"children":["上記ではまず",["$","code",null,{"children":"make-qureg"}],"で長さ3の量子レジスタを生成し、",["$","code",null,{"children":"hadamard-init"}],"という関数を渡して初期化しています ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=in%20terms%20of%20mathematical%20concepts,direct%20access%20to%20the%20internal%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=in%20terms%20of%20mathematical%20concepts,direct%20access%20to%20the%20internal)","children":"^2"}]," その結果、内部ではベクトル",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mo",null,{"stretchy":"false","children":"("}],["$","mfrac",null,{"children":[["$","mn",null,{"children":"1"}],["$","msqrt",null,{"children":["$","mn",null,{"children":"8"}]}]]}],["$","mo",null,{"separator":"true","children":","}],["$","mfrac",null,{"children":[["$","mn",null,{"children":"1"}],["$","msqrt",null,{"children":["$","mn",null,{"children":"8"}]}]]}],["$","mo",null,{"separator":"true","children":","}],["$","mi",null,{"mathvariant":"normal","children":"."}],["$","mi",null,{"mathvariant":"normal","children":"."}],["$","mi",null,{"mathvariant":"normal","children":"."}],["$","mo",null,{"separator":"true","children":","}],["$","mfrac",null,{"children":[["$","mn",null,{"children":"1"}],["$","msqrt",null,{"children":["$","mn",null,{"children":"8"}]}]]}],["$","mo",null,{"stretchy":"false","children":")"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"(\\frac{1}{\\sqrt{8}},\\frac{1}{\\sqrt{8}},...,\\frac{1}{\\sqrt{8}})"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.3831em","verticalAlign":"-0.538em"}}],["$","span",null,{"className":"mopen","children":"("}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mopen nulldelimiter"}],["$","span",null,{"className":"mfrac","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.8451em"},"children":[["$","span",null,{"style":{"top":"-2.551em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord sqrt mtight","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.9128em"},"children":[["$","span",null,{"className":"svg-align","style":{"top":"-3em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"mord mtight","style":{"paddingLeft":"0.833em"},"children":["$","span",null,{"className":"mord mtight","children":"8"}]}]]}],["$","span",null,{"style":{"top":"-2.8728em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"hide-tail mtight","style":{"minWidth":"0.853em","height":"1.08em"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"400em","height":"1.08em","viewBox":"0 0 400000 1080","preserveAspectRatio":"xMinYMin slice","children":["$","path",null,{"d":"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.1272em"},"children":["$","span",null,{}]}]}]]}]}]}]}]]}],["$","span",null,{"style":{"top":"-3.23em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"frac-line","style":{"borderBottomWidth":"0.04em"}}]]}],["$","span",null,{"style":{"top":"-3.394em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord mtight","children":"1"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.538em"},"children":["$","span",null,{}]}]}]]}]}],["$","span",null,{"className":"mclose nulldelimiter"}]]}],["$","span",null,{"className":"mpunct","children":","}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.1667em"}}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mopen nulldelimiter"}],["$","span",null,{"className":"mfrac","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.8451em"},"children":[["$","span",null,{"style":{"top":"-2.551em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord sqrt mtight","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.9128em"},"children":[["$","span",null,{"className":"svg-align","style":{"top":"-3em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"mord mtight","style":{"paddingLeft":"0.833em"},"children":["$","span",null,{"className":"mord mtight","children":"8"}]}]]}],["$","span",null,{"style":{"top":"-2.8728em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"hide-tail mtight","style":{"minWidth":"0.853em","height":"1.08em"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"400em","height":"1.08em","viewBox":"0 0 400000 1080","preserveAspectRatio":"xMinYMin slice","children":["$","path",null,{"d":"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.1272em"},"children":["$","span",null,{}]}]}]]}]}]}]}]]}],["$","span",null,{"style":{"top":"-3.23em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"frac-line","style":{"borderBottomWidth":"0.04em"}}]]}],["$","span",null,{"style":{"top":"-3.394em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord mtight","children":"1"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.538em"},"children":["$","span",null,{}]}]}]]}]}],["$","span",null,{"className":"mclose nulldelimiter"}]]}],["$","span",null,{"className":"mpunct","children":","}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.1667em"}}],["$","span",null,{"className":"mord","children":"..."}],["$","span",null,{"className":"mpunct","children":","}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.1667em"}}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mopen nulldelimiter"}],["$","span",null,{"className":"mfrac","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.8451em"},"children":[["$","span",null,{"style":{"top":"-2.551em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord sqrt mtight","children":["$","span",null,{"className":"vlist-t vlist-t2","children":[["$","span",null,{"className":"vlist-r","children":[["$","span",null,{"className":"vlist","style":{"height":"0.9128em"},"children":[["$","span",null,{"className":"svg-align","style":{"top":"-3em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"mord mtight","style":{"paddingLeft":"0.833em"},"children":["$","span",null,{"className":"mord mtight","children":"8"}]}]]}],["$","span",null,{"style":{"top":"-2.8728em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"hide-tail mtight","style":{"minWidth":"0.853em","height":"1.08em"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"400em","height":"1.08em","viewBox":"0 0 400000 1080","preserveAspectRatio":"xMinYMin slice","children":["$","path",null,{"d":"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.1272em"},"children":["$","span",null,{}]}]}]]}]}]}]}]]}],["$","span",null,{"style":{"top":"-3.23em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"frac-line","style":{"borderBottomWidth":"0.04em"}}]]}],["$","span",null,{"style":{"top":"-3.394em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"3em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":["$","span",null,{"className":"mord mtight","children":"1"}]}]}]]}]]}],["$","span",null,{"className":"vlist-s","children":"​"}]]}],["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.538em"},"children":["$","span",null,{}]}]}]]}]}],["$","span",null,{"className":"mclose nulldelimiter"}]]}],["$","span",null,{"className":"mclose","children":")"}]]}]}]]}],"（",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","msup",null,{"children":[["$","mn",null,{"children":"2"}],["$","mn",null,{"children":"3"}]]}],["$","mo",null,{"children":"="}],["$","mn",null,{"children":"8"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"2^3=8"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":[["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.8141em"}}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord","children":"2"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":"3"}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":"="}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.6444em"}}],["$","span",null,{"className":"mord","children":"8"}]]}]]}]]}],"次元）として状態が設定されます ",["$","a",null,{"href":"%5Bhttp://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=The%20mathematical%20meaning%20of%20H%E2%8A%97n,4%5D(http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=The%20mathematical%20meaning%20of%20H%E2%8A%97n,4)","children":"^4"}]," QLISPではこのように高階関数で初期状態を自由に設定でき、以降は例えば",["$","code",null,{"children":"(H q 0)"}],"のような感じでビット0にHゲートを適用、",["$","code",null,{"children":"(CNOT q 0 1)"}],"で制御NOT、といった関数呼び出しで操作します。QLISPは教育用途ということもあり、**既存のLispの利点（REPLでの対話実行やマクロによる拡張）**をそのまま活かして実験できます。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Silq"}],": Silqの文法はC系に似ていますが、型注釈に特徴があります。以下に1量子ビットを作成しスーパーポジションを作って測定する簡単なプログラム例を示します。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-silq","children":"def main() : !Bool {         // main関数、出力は古典Bool型\n    q := 0;                  // 量子ビットqを0で初期化（型は推論でQubitに）\n    H(q);                    // アダマール適用で |0> -> (|0>+|1>)/√2\n    result := measure q;     // 測定して結果を古典ビットに\n    return result;\n}\n"}]}],"\n",["$","p",null,{"children":["上では",["$","code",null,{"children":"q := 0;"}],"と代入していますが、0は古典値（!int型）であり、それを量子ビット型に暗黙変換して",["$","code",null,{"children":"q"}],"に割り当てています [^9] この時点で",["$","code",null,{"children":"q"}],"は量子状態|0>です。",["$","code",null,{"children":"H(q);"}],"でスーパーポジションを作り、",["$","code",null,{"children":"measure q"}],"で測定して古典Boolを得ています。Silqではこのように",["$","strong",null,{"children":"古典と量子がシームレス"}],"に混ざったコードを書けます [^38] 関数の戻り型",["$","code",null,{"children":"!Bool"}],"は古典的なBoolであることを示し、結果として",["$","code",null,{"children":"main()"}],"を実行すると0か1が返るでしょう。Silqの注釈",["$","code",null,{"children":"!"}],"や",["$","code",null,{"children":"qfree"}],"はコード中に量子効果があるかを示すマーカーですが、この例ではシンプルなので使っていません。実際には例えば",["$","code",null,{"children":"def f(x:!Int) { ... }"}],"のように書くと",["$","code",null,{"children":"x"}],"が古典整数（重ね合わせではない）であると指定でき、安全にコピー・捨てができます [^46] Silqの応用としては、小規模なアルゴリズム（ドイチュ・ジョサやグローバー、量子フーリエ変換など）の記述が既に試みられており、論文中や公開資料でコード例が示されています [^47] Silqはまだ研究段階ですが、将来的にはQ#のような実用言語へのフィードバックが期待されています。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Quipper"}],": QuipperはHaskellベースなので、",["$","code",null,{"children":"do"}],"記法や型シグネチャが登場します。先ほど少し触れた",["$","strong",null,{"children":"ベル状態生成"}],"のコードを再掲します。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-haskell","children":"plus_minus :: Bool -> Circ Qubit\nplus_minus b = do\n    q <- qinit b\n    had q\n    return q\n\nshare :: Qubit -> Circ (Qubit, Qubit)\nshare q = do\n    r <- qinit False\n    q `controlled` qnot r\n    return (q, r)\n"}]}],"\n",["$","p",null,{"children":["まず",["$","code",null,{"children":"plus_minus"}],"は古典Boolを受け取り、量子ビットを返す関数です [^40] ",["$","code",null,{"children":"qinit b"}],"でブール値に対応する量子ビットを|0>または|1>に初期化し、",["$","code",null,{"children":"had q"}],"でHゲートを適用しています。この関数を例えば",["$","code",null,{"children":"plus_minus False"}],"と呼ぶと|+>状態の量子ビットが得られます。同様に",["$","code",null,{"children":"share"}],"は量子ビットを受け取り、新たな量子ビット",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"r"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"r"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"r"}]]}]}]]}],"を|0>で初期化してCNOT（ここでは制御付きノット）をかけ、2量子ビットのタプルを返しています [^41] Quipperでは",["$","code",null,{"children":"Circ Qubit"}],"や",["$","code",null,{"children":"Circ (Qubit,Qubit)"}],"という型が出てきますが、",["$","code",null,{"children":"Circ"}],"モナドが回路構築を担っていることを示します。プログラムを実行すると実際には回路が構築され、例えば",["$","code",null,{"children":"print_simple circuit"}],"のような関数でその回路を可視化（TeXや図として出力）することもできます [^48] Quipperは高度な例として、",["$","strong",null,{"children":"量子整数の加算回路"}],"や",["$","strong",null,{"children":"量子テレポーテーション"}],"などもチュートリアルで示しています [^49]  [^50] また、研究レベルでは",["$","strong",null,{"children":"グラフ上の量子ウォーク"}],"や",["$","strong",null,{"children":"ハミルトニアンシミュレーション"}],"などの実装例も報告されています [^19] Quipperの応用分野としては、",["$","strong",null,{"children":"量子アルゴリズム研究"}],"全般（特に大規模回路の設計）や、量子回路最適化の形式検証などが挙げられます。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"QML"}],": QMLのコードは独特で、論文中では数学的記法で書かれています。例えばHadamard（H）をQMLで定義する部分は以下の通りです。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"had : Q2 -> Q2\nhad x = if ◦x \n        then {qfalse | (-1) qtrue}\n        else {qfalse | qtrue}\n"}]}],"\n",["$","p",null,{"children":["ここで",["$","code",null,{"children":"Q2"}],"は1量子ビット（2次元状態空間）の型、",["$","code",null,{"children":"qfalse"}],"/",["$","code",null,{"children":"qtrue"}],"はそれぞれ|0>と|1>に対応する量子データです [^25] ",["$","code",null,{"children":"if ◦x"}],"という構文は、量子ビット",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"x"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"x"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","children":"x"}]]}]}]]}],"を測定せずに条件に使う特殊なもので、",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"children":"x"}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mtext",null,{"children":"が"}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mn",null,{"children":"0"}],["$","mo",null,{"children":">"}],["$","mtext",null,{"children":"の場合は"}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mrow",null,{"children":[["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"f"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"l"}],["$","mi",null,{"children":"s"}],["$","mi",null,{"children":"e"}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mo",null,{"stretchy":"false","children":"("}],["$","mo",null,{"children":"−"}],["$","mn",null,{"children":"1"}],["$","mo",null,{"stretchy":"false","children":")"}],["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"r"}],["$","mi",null,{"children":"u"}],["$","mi",null,{"children":"e"}]]}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mtext",null,{"children":"（"}],["$","mo",null,{"children":"="}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"x`が|0>の場合は`{qfalse | (-1) qtrue}`（= "}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":[["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord mathnormal","children":"x"}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord cjk_fallback","children":"が"}],["$","span",null,{"className":"mord","children":"∣0"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":">"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord cjk_fallback","children":"の場合は"}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.03588em"},"children":"q"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10764em"},"children":"f"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.01968em"},"children":"l"}],["$","span",null,{"className":"mord mathnormal","children":"se"}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mopen","children":"("}],["$","span",null,{"className":"mord","children":"−"}],["$","span",null,{"className":"mord","children":"1"}],["$","span",null,{"className":"mclose","children":")"}],["$","span",null,{"className":"mord mathnormal","children":"qt"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"r"}],["$","span",null,{"className":"mord mathnormal","children":"u"}],["$","span",null,{"className":"mord mathnormal","children":"e"}]]}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord cjk_fallback","children":"（"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":"="}]]}]]}]]}],"|0> - |1>",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mtext",null,{"children":"、つまり"}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mn",null,{"children":"1"}],["$","mo",null,{"children":">"}],["$","mtext",null,{"children":"に"}],["$","mo",null,{"children":"−"}],["$","mn",null,{"children":"1"}],["$","mtext",null,{"children":"の位相を付与した状態）を返し、"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"、つまり|1>に-1の位相を付与した状態）を返し、"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":[["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord cjk_fallback","children":"、つまり"}],["$","span",null,{"className":"mord","children":"∣1"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":">"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.7667em","verticalAlign":"-0.0833em"}}],["$","span",null,{"className":"mord cjk_fallback","children":"に"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2222em"}}],["$","span",null,{"className":"mbin","children":"−"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2222em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.6833em"}}],["$","span",null,{"className":"mord","children":"1"}],["$","span",null,{"className":"mord cjk_fallback","children":"の位相を付与した状態）を返し、"}]]}]]}]]}],"x",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mtext",null,{"children":"が"}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mn",null,{"children":"1"}],["$","mo",null,{"children":">"}],["$","mtext",null,{"children":"なら"}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mrow",null,{"children":[["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"f"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"l"}],["$","mi",null,{"children":"s"}],["$","mi",null,{"children":"e"}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"q"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"r"}],["$","mi",null,{"children":"u"}],["$","mi",null,{"children":"e"}]]}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mtext",null,{"children":"（"}],["$","mo",null,{"children":"="}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"が|1>なら`{qfalse | qtrue}`（= "}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":[["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord cjk_fallback","children":"が"}],["$","span",null,{"className":"mord","children":"∣1"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":">"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord cjk_fallback","children":"なら"}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.03588em"},"children":"q"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10764em"},"children":"f"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.01968em"},"children":"l"}],["$","span",null,{"className":"mord mathnormal","children":"se"}],["$","span",null,{"className":"mord","children":"∣"}],["$","span",null,{"className":"mord mathnormal","children":"qt"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"r"}],["$","span",null,{"className":"mord mathnormal","children":"u"}],["$","span",null,{"className":"mord mathnormal","children":"e"}]]}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord cjk_fallback","children":"（"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2778em"}}],["$","span",null,{"className":"mrel","children":"="}]]}]]}]]}],"|0> + |1>",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mtext",null,{"children":"）を返すという意味になります"}],["$","msup",null,{"children":[["$","mo",null,{"stretchy":"false","children":"["}],["$","mn",null,{"children":"2"}]]}],["$","mn",null,{"children":"5"}],["$","mo",null,{"stretchy":"false","children":"]"}],["$","mtext",null,{"children":"結果的にこれは行列で書けば"}],["$","mi",null,{"children":"H"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"d"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"m"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"r"}],["$","mi",null,{"children":"d"}],["$","mtext",null,{"children":"そのものですし、"}],["$","mn",null,{"children":"2"}],["$","mtext",null,{"children":"回適用すれば元に戻ることも確認できます"}],["$","msup",null,{"children":[["$","mo",null,{"stretchy":"false","children":"["}],["$","mn",null,{"children":"5"}]]}],["$","mn",null,{"children":"1"}],["$","mo",null,{"stretchy":"false","children":"]"}],["$","mi",null,{"children":"Q"}],["$","mi",null,{"children":"M"}],["$","mi",null,{"children":"L"}],["$","mtext",null,{"children":"ではこのように"}],["$","mo",null,{"children":"∗"}],["$","mo",null,{"children":"∗"}],["$","mtext",null,{"children":"ブラケット記法的な重ね合わせ"}],["$","mo",null,{"children":"∗"}],["$","mo",null,{"children":"∗"}],["$","mtext",null,{"children":"（"}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mrow",null,{"children":[["$","mi",null,{"children":"s"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"e"}],["$","mn",null,{"children":"1"}],["$","mi",null,{"mathvariant":"normal","children":"∣"}],["$","mi",null,{"children":"s"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"a"}],["$","mi",null,{"children":"t"}],["$","mi",null,{"children":"e"}],["$","mn",null,{"children":"2"}]]}],["$","mi",null,{"mathvariant":"normal","children":"‘"}],["$","mtext",null,{"children":"のような形）で量子状態を表現します。さらに、"}],["$","mn",null,{"children":"2"}],["$","mtext",null,{"children":"量子ビットの入力に対してそれらが等しいか判定するアルゴリズムも示されています"}],["$","msup",null,{"children":[["$","mo",null,{"stretchy":"false","children":"["}],["$","mn",null,{"children":"2"}]]}],["$","mn",null,{"children":"6"}],["$","mo",null,{"stretchy":"false","children":"]"}],["$","mi",null,{"children":"Q"}],["$","mi",null,{"children":"M"}],["$","mi",null,{"children":"L"}],["$","mtext",null,{"children":"コードでは、"}],["$","mn",null,{"children":"2"}],["$","mtext",null,{"children":"つの量子ビット"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"）を返すという意味になります [^25] 結果的にこれは行列で書けばHadamardそのものですし、2回適用すれば元に戻ることも確認できます [^51] QMLではこのように**ブラケット記法的な重ね合わせ**（`{ state1 | state2 }`のような形）で量子状態を表現します。さらに、2量子ビットの入力に対してそれらが等しいか判定するアルゴリズムも示されています [^26] QMLコードでは、2つの量子ビット"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":[["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.0641em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord cjk_fallback","children":"）を返すという意味になります"}],["$","span",null,{"className":"mopen","children":[["$","span",null,{"className":"mopen","children":"["}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":"2"}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mord","children":"5"}],["$","span",null,{"className":"mclose","children":"]"}],["$","span",null,{"className":"mord cjk_fallback","children":"結果的にこれは行列で書けば"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.08125em"},"children":"H"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","children":"d"}],["$","span",null,{"className":"mord mathnormal","children":"ama"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"r"}],["$","span",null,{"className":"mord mathnormal","children":"d"}],["$","span",null,{"className":"mord cjk_fallback","children":"そのものですし、"}],["$","span",null,{"className":"mord","children":"2"}],["$","span",null,{"className":"mord cjk_fallback","children":"回適用すれば元に戻ることも確認できます"}],["$","span",null,{"className":"mopen","children":[["$","span",null,{"className":"mopen","children":"["}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":"5"}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mord","children":"1"}],["$","span",null,{"className":"mclose","children":"]"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10903em"},"children":"QM"}],["$","span",null,{"className":"mord mathnormal","children":"L"}],["$","span",null,{"className":"mord cjk_fallback","children":"ではこのように"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2222em"}}],["$","span",null,{"className":"mbin","children":"∗"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2222em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.6833em"}}],["$","span",null,{"className":"mord","children":"∗"}],["$","span",null,{"className":"mord cjk_fallback","children":"ブラケット記法的な重ね合わせ"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2222em"}}],["$","span",null,{"className":"mbin","children":"∗"}],["$","span",null,{"className":"mspace","style":{"marginRight":"0.2222em"}}]]}],["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.0641em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord","children":"∗"}],["$","span",null,{"className":"mord cjk_fallback","children":"（"}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord mathnormal","children":"s"}],["$","span",null,{"className":"mord mathnormal","children":"t"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","children":"t"}],["$","span",null,{"className":"mord mathnormal","children":"e"}],["$","span",null,{"className":"mord","children":"1∣"}],["$","span",null,{"className":"mord mathnormal","children":"s"}],["$","span",null,{"className":"mord mathnormal","children":"t"}],["$","span",null,{"className":"mord mathnormal","children":"a"}],["$","span",null,{"className":"mord mathnormal","children":"t"}],["$","span",null,{"className":"mord mathnormal","children":"e"}],["$","span",null,{"className":"mord","children":"2"}]]}],["$","span",null,{"className":"mord","children":"‘"}],["$","span",null,{"className":"mord cjk_fallback","children":"のような形）で量子状態を表現します。さらに、"}],["$","span",null,{"className":"mord","children":"2"}],["$","span",null,{"className":"mord cjk_fallback","children":"量子ビットの入力に対してそれらが等しいか判定するアルゴリズムも示されています"}],["$","span",null,{"className":"mopen","children":[["$","span",null,{"className":"mopen","children":"["}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":"2"}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mord","children":"6"}],["$","span",null,{"className":"mclose","children":"]"}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10903em"},"children":"QM"}],["$","span",null,{"className":"mord mathnormal","children":"L"}],["$","span",null,{"className":"mord cjk_fallback","children":"コードでは、"}],["$","span",null,{"className":"mord","children":"2"}],["$","span",null,{"className":"mord cjk_fallback","children":"つの量子ビット"}]]}]]}]]}],"a,b$に対し、それぞれに対する",["$","code",null,{"children":"if ◦a"}],"と",["$","code",null,{"children":"if ◦b"}],"が",["$","strong",null,{"children":"入れ子にならず並列に"}],"出現することで「同時に両方を見る」処理を表現し、Deutschの問題を解くような動きをします [^26] このような量子制御構造を直接書ける点がQMLのユニークな部分です。もっとも、QMLは学術プロトタイプであり、実際のコード実行はHaskell上のコンパイラ経由で回路を出力する形でした [^52] 適用可能な分野としては、",["$","strong",null,{"children":"量子論理回路の研究"}],"や",["$","strong",null,{"children":"量子計算の構造の分類"}],"といった理論的側面が強いですが、将来的にこうした概念は他の言語に受け継がれています。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Lambda-Q"}],": 具体的なコード例というより計算規則になりますが、ラムダ計算拡張では、たとえばランダムな振る舞いを示すラムダ項や、スーパーポジションを作る演算子が定義されます。Mayminの提案では、確率的な二択を表す演算子（コインフリップのような）があり、それを再帰的に用いてNP完全問題を解く項を書く例が示されました。しかし前述の通り物理実現性に問題があり、以降のLambda-Q研究では",["$","strong",null,{"children":"線形型を課したラムダ計算"}],"や",["$","strong",null,{"children":"測定を含む項の等価性検証"}],"など、より制約を加えた形になっています [^28]  [^53] 例えばvan Tonderの量子ラムダ計算では、",["$","code",null,{"children":"let <x|y> = E in F"}],"のような構文で",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"E"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"E"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.6833em"}}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.05764em"},"children":"E"}]]}]}]]}],"の結果が",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"x"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"x"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","children":"x"}]]}]}]]}],"と",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"y"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"y"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.625em","verticalAlign":"-0.1944em"}}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.03588em"},"children":"y"}]]}]}]]}],"二つの可能性（重ね合わせ）でFに伝播する…といった具合に、ラムダ計算としての評価と量子並列を対応させています。実用コードはありませんが、このような形式体系は",["$","strong",null,{"children":"量子プログラミング言語の正当性証明"}],"などに応用されています。"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Proto-Quipper"}],": Proto-Quipper自体はエンドユーザ向けではないためコード例は控えめですが、特徴を示すスニペットとして",["$","strong",null,{"children":"型注釈"}],"の例を挙げます。Proto-Quipperでは、型に",["$","code",null,{"children":"Parameter"}],"（パラメータ：回路生成時に既知の古典値）か",["$","code",null,{"children":"State"}],"（量子状態として扱う値）かのモーダル区別があります [^54] 例えば、",["$","code",null,{"children":"Bool"}],"はState型のブール（量子ビットと等価）で、",["$","code",null,{"children":"!Bool"}],"のようにエクスクラメーションで修飾するとParameter型のブール（古典的に使える）になります [^35] 関数の型として",["$","code",null,{"children":"!Bool -> Circ Bool"}],"などと書けば、「古典的なブール値を受け取り、量子ブール（=量子ビット）を返す回路を生成する」といった意味になります。実際のProto-Quipper-Dでは線形依存型があり、例えば長さ",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"n"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"n"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","children":"n"}]]}]}]]}],"の古典リストに応じてサイズ",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":["$","mi",null,{"children":"n"}]}],["$","annotation",null,{"encoding":"application/x-tex","children":"n"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"0.4306em"}}],["$","span",null,{"className":"mord mathnormal","children":"n"}]]}]}]]}],"の量子レジスタを確保する関数に型で制約を与える、といったこともできます。このような機能は",["$","strong",null,{"children":"量子プログラムとその回路資源の関係"}],"を型で表現する試みであり、大規模アルゴリズムのスケーリング則を保証したり、誤用による回路サイズ爆発を防ぐといった応用が期待されます [^32]  [^44]"]}],"\n"]}],"\n"]}],"\n",["$","h3",null,{"children":"応用分野と今後の展望"}],"\n",["$","p",null,{"children":["以上のような高レベル量子言語は、主に",["$","strong",null,{"children":"量子アルゴリズム研究や教育"}],"に使われてきました。Quipperは計算機科学者と物理学者の共同プロジェクトで、",["$","strong",null,{"children":"量子アルゴリズム実装のプロトタイプ"}],"として成功を収めています [^12] 例えば新しいアルゴリズム提案時に、その概念実証をQuipperでコーディングし回路規模を見積もる、といった使われ方がありました。QLISPやQMLは",["$","strong",null,{"children":"教育的利用"}],"が中心で、学生が量子計算の基礎を学ぶ際に、手を動かしてスーパーポジションや量子並列を試すためのツールとなりました [^55] Silqは比較的新しく、",["$","strong",null,{"children":"直観的な量子コーディング"}],"を促進することで将来的に量子プログラマの裾野を広げる可能性があります。現状ではハードウェア指向のフレームワークが主流ですが、ゆくゆくはSilqのような高水準言語でプログラムを書き、それを各種バックエンド（IBMやIonQなど各社の量子デバイス）向けにコンパイルする、という流れになるかもしれません。"]}],"\n",["$","p",null,{"children":["課題としては先に述べたものに加え、",["$","strong",null,{"children":"並行性や分散量子計算への対応"}],"があります。高レベル記述では、例えば量子ネットワーク間でのプロトコル（テレポーテーションや分散アルゴリズム）を書く際に、通信チャネルの抽象化が必要です。現在の言語は1台の量子計算機内で完結する前提が多いので、この点の拡張も今後の研究課題です。また、エラー耐性（量子エラー訂正）の組み込みも将来重要になるでしょう。高レベル言語でアルゴリズムを書く際に、自動的にエラー耐性コードにマッピングしたり、エラー率をパラメータとしてコード生成したりする機能が考えられます。実際、量子誤り訂正は非常に複雑な回路を必要とするため、高級言語による抽象化が望まれます。"]}],"\n",["$","p",null,{"children":["総合すると、量子回路ベースではない量子プログラミング言語は、",["$","strong",null,{"children":"量子計算機のプログラミング生産性を向上させ、より多くの人々が量子アルゴリズムを開発できるようにする"}],"ための重要な方向性です。その実現には、言語設計とコンパイラ技術、物理デバイス制約の橋渡しといったマルチディシプリナリな取り組みが必要ですが、既にSilqのように具体的な成果も出始めています。今後、産業界のフレームワークと学術的言語の知見が融合し、直観的で安全かつ効率的な量子プログラミング環境が構築されていくことが期待されます。"]}],"\n",["$","h3",null,{"children":"参考文献"}],"\n",["$","p",null,{"children":["[^5]: ",["$","a",null,{"href":"https://files.sri.inf.ethz.ch/website/papers/pldi20-silq.pdf#:~:text=Existing%20quantum%20languages%20force%20the,To%20ensure","children":"Silq: A High-Level Quantum Language with Safe Uncomputation and Intuitive Semantics"}],"\n[^6]: ",["$","a",null,{"href":"https://thequantuminsider.com/2021/04/27/silq-the-easier-quantum-computer-programming-language/#:~:text=Silq%20is%20the%20first%20high,level%20implementation%20of%20quantum%20algorithms","children":"Silq - The Easier Quantum Computer Programming Language"}],"\n[^7]: ",["$","a",null,{"href":"https://thequantuminsider.com/2021/04/27/silq-the-easier-quantum-computer-programming-language/#:~:text=According%20to%20computer%20science%20professor,recipe%20that%20gives%20temporary%20values","children":"Silq - The Easier Quantum Computer Programming Language"}],"\n[^8]: ",["$","a",null,{"href":"https://files.sri.inf.ethz.ch/website/papers/pldi20-silq.pdf#:~:text=temporary%20values%2C%20as%20in%20classical,engineering%20%E2%86%92%20For%02mal%20language%20definitions","children":"Silq: A High-Level Quantum Language with Safe Uncomputation and Intuitive Semantics"}],"\n[^9]: ",["$","a",null,{"href":"https://silq.ethz.ch/documentation#:~:text=To%20indicate%20that%20a%20type,and%20not","children":"Silq - Documentation"}],"\n[^10]: ",["$","a",null,{"href":"https://files.sri.inf.ethz.ch/website/papers/pldi20-silq.pdf#:~:text=novel%20annotations%20to%20reject%20unphysical,engineering%20%E2%86%92%20For%02mal%20language%20definitions","children":"Silq: A High-Level Quantum Language with Safe Uncomputation and Intuitive Semantics"}],"\n[^11]: ",["$","a",null,{"href":"https://www.artiba.org/blog/meet-silq-the-first-intuitive-high-level-language-for-quantum-computers#:~:text=,%E2%80%93%20Benjamin%20Bichsel","children":"Meet Silq- The First Intuitive High-Level Language for Quantum Computers | Artificial Intelligence"}],"\n[^12]: ",["$","a",null,{"href":"https://arxiv.org/abs/1304.3390#:~:text=,formal%20methods%20to%20analyze%20quantum","children":"[1304.3390] Quipper: A Scalable Quantum Programming Language"}],"\n[^13]: ",["$","a",null,{"href":"https://arxiv.org/abs/1304.3390#:~:text=practical%20scale%2C%20i,formal%20methods%20to%20analyze%20quantum","children":"[1304.3390] Quipper: A Scalable Quantum Programming Language"}],"\n[^14]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=Quipper%20is%20a%20functional%20programming,algorithms%20from%20the%20quantum%20computing","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^15]: ",["$","a",null,{"href":"https://www.mathstat.dal.ca/~selinger/quipper/#:~:text=%2A%20A%20high,Extensible%20quantum%20data%20types","children":"The Quipper Language"}],"\n[^16]: ",["$","a",null,{"href":"https://www.mathstat.dal.ca/~selinger/quipper/#:~:text=styles.%20%2A%20Built,generated%20at%20circuit%20execution%20time","children":"The Quipper Language"}],"\n[^17]: ",["$","a",null,{"href":"https://www.mathstat.dal.ca/~selinger/quipper/#:~:text=integer%20and%20fixed,circuits%20into%20specific%20gate%20sets","children":"The Quipper Language"}],"\n[^18]: ",["$","a",null,{"href":"https://arxiv.org/abs/1304.3390#:~:text=quantum%20programming%20language,methods%20to%20analyze%20quantum%20algorithms","children":"[1304.3390] Quipper: A Scalable Quantum Programming Language"}],"\n[^19]: ",["$","a",null,{"href":"https://www.mathstat.dal.ca/~selinger/quipper/#:~:text=,Kuperberg%27s%20Unique%20Shortest%20Vector%20algorithm","children":"The Quipper Language"}],"\n[^20]: ",["$","a",null,{"href":"https://arxiv.org/abs/1304.3390#:~:text=using%20trillions%20of%20gates,formal%20methods%20to%20analyze%20quantum","children":"[1304.3390] Quipper: A Scalable Quantum Programming Language"}],"\n[^21]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=We%20introduce%20the%20language%20QML%2C,Strict%20pro%02grams%20are%20free%20from","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=We%20introduce%20the%20language%20QML%2C,Strict%20pro%02grams%20are%20free%20from"}],"\n[^22]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=We%20present%20a%20semantics%20of,is%20usually%20defined%20by%20presenting","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=We%20present%20a%20semantics%20of,is%20usually%20defined%20by%20presenting"}],"\n[^23]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=quantum%20computations%2C%20which%20provides%20a,1%20Introduction","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=quantum%20computations%2C%20which%20provides%20a,1%20Introduction"}],"\n[^24]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=quantum%20gates,1%20Introduction","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=quantum%20gates,1%20Introduction"}],"\n[^25]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=this%20operation%20is%20implemented%20by,started%20by%20cancelling%20out%20amplitudes","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=this%20operation%20is%20implemented%20by,started%20by%20cancelling%20out%20amplitudes"}],"\n[^26]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=possibility%20to%20create%20superpositions%20which,subtle%20exploitation%20of%20this%20effect","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=possibility%20to%20create%20superpositions%20which,subtle%20exploitation%20of%20this%20effect"}],"\n[^27]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=introduce%20here,operational%20semantics%20for%20quantum%20programs","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=introduce%20here,operational%20semantics%20for%20quantum%20programs"}],"\n[^28]: ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Quantum_programming#:~:text=The%20first%20attempt%20to%20define,strictly%20stronger%20than%20the%20standard","children":"Quantum programming - Wikipedia"}],"\n[^29]: ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Quantum_programming#:~:text=match%20at%20L651%20quantum%20circuit,citation%20needed","children":"Quantum programming - Wikipedia"}],"\n[^30]: ",["$","a",null,{"href":"https://quantiki.org/wiki/quantum-programming-language#:~:text=","children":"Quantum Programming Language | Quantiki"}],"\n[^31]: ",["$","a",null,{"href":"https://quantiki.org/wiki/quantum-programming-language#:~:text=Quantum%20Lambda%20Language%20is%20based,has%20the%20same%20computational%20power","children":"Quantum Programming Language | Quantiki"}],"\n[^32]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=development%20of%20Proto,linear%20type%20system%20with%20subtyping","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^33]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=Selinger%202018%5D.%20More%20recently%2C%20Proto,Fu%20et%20al.%202020b%2Ca","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^34]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=Proto,known%20at%20circuit%20generation%20time","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^35]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=Proto,also%20a%20subset%20of%20state","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^36]: ",["$","a",null,{"href":"https://files.sri.inf.ethz.ch/website/papers/pldi20-silq.pdf#:~:text=Convenience%20Functions,1%20shows%20a%20Quipper%20implementation","children":"Silq: A High-Level Quantum Language with Safe Uncomputation and Intuitive Semantics"}],"\n[^37]: ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Quantum_programming#:~:text=Quantum%20Guarded%20Command%20Language%20,created%20by%20%20200","children":"Quantum programming - Wikipedia"}],"\n[^38]: ",["$","a",null,{"href":"https://chrisheunen.github.io/iqpl/silq.html#:~:text=SILQ%20programs%20operate%20much%20like,This%20is%20known%20as%20the","children":"Introduction to Quantum Programming Languages"}],"\n[^39]: ",["$","a",null,{"href":"https://silq.ethz.ch/documentation#:~:text=We%20use%20the%20annotation%20,ii%29%20enables%20automatic%20uncomputation","children":"Silq - Documentation"}],"\n[^40]: ",["$","a",null,{"href":"http://ar5iv.org/abs/1304.5485#:~:text=plus_minus%20%3A%3A%20Bool%20,hadamard%20q","children":"[1304.5485] An Introduction to Quantum Programming in Quipper"}],"\n[^41]: ",["$","a",null,{"href":"http://ar5iv.org/abs/1304.5485#:~:text=directly%20from%20the%20given%20code,to%20be%20controlled%20by%20the","children":"[1304.5485] An Introduction to Quantum Programming in Quipper"}],"\n[^42]: ",["$","a",null,{"href":"http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=an%20arbitrary%20state,each%20amplitude%20of%20the%20resulting","children":"http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=an%20arbitrary%20state,each%20amplitude%20of%20the%20resulting"}],"\n[^43]: ",["$","a",null,{"href":"http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=are%20illustrated%20with%20a%20concrete,level%20primitives","children":"http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=are%20illustrated%20with%20a%20concrete,level%20primitives"}],"\n[^44]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=semantics%20for%20fragments%20of%20Quipper,linear%20type%20system%20with%20subtyping","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^45]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=language%2C%20Quipper%20shares%20some%20of,of%20Illinois%20at%20Urbana%02Champaign%2C%20USA","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^46]: ",["$","a",null,{"href":"https://silq.ethz.ch/documentation#:~:text=classical%3A%20It%20has%20type%20,and%20not","children":"Silq - Documentation"}],"\n[^47]: ",["$","a",null,{"href":"https://www.packtpub.com/en-HU/product/quantum-computing-with-silq-programming-9781800569669/chapter/chapter-6-silq-programming-basics-and-features-8/section/simple-example-programs-using-silq-ch08lvl1sec53?srsltid=AfmBOoo9-TQ0uiKfeMCvRbbI4aaSarY3RkE6jDsj56rAOPI5aGk6YiOc#:~:text=Simple%20example%20programs%20using%20Silq,on%20the%20quantum%20logic","children":"Simple example programs using Silq - Packt+ | Advance your ..."}],"\n[^48]: ",["$","a",null,{"href":"http://ar5iv.org/abs/1304.5485#:~:text=match%20at%20L196%20example%2C%20to,set%20the%20parameter%20to","children":"[1304.5485] An Introduction to Quantum Programming in Quipper"}],"\n[^49]: ",["$","a",null,{"href":"http://ar5iv.org/abs/1304.5485#:~:text=illustrate%20many%20of%20Quipper%E2%80%99s%20language,a%20quantum%20circuit%20for%20addition","children":"[1304.5485] An Introduction to Quantum Programming in Quipper"}],"\n[^50]: ",["$","a",null,{"href":"http://ar5iv.org/abs/1304.5485#:~:text=1","children":"[1304.5485] An Introduction to Quantum Programming in Quipper"}],"\n[^51]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=input%20qubit%20x%2C%20returns%20one,by%20query%02ing%20both%20inputs%20at","children":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=input%20qubit%20x%2C%20returns%20one,by%20query%02ing%20both%20inputs%20at"}],"\n[^52]: ",["$","a",null,{"href":"https://people.cs.nott.ac.uk/psztxa/publ/qml.pdf#:~:text=We%20introduce%20the%20language%20QML%2C,its%20categorical%20semantics%3A%20QML","children":"[PDF] A functional quantum programming language"}],"\n[^53]: ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Quantum_programming#:~:text=In%202003%2C%20Andr%C3%A9%20van%20Tonder,extension%20of%20the%20lambda%20calculus","children":"Quantum programming - Wikipedia"}],"\n[^54]: ",["$","a",null,{"href":"https://cse.sc.edu/~pfu/document/papers/dynlift.pdf#:~:text=match%20at%20L105%20Proto,also%20a%20subset%20of%20state","children":"Proto-Quipper with Dynamic Lifting"}],"\n[^55]: ",["$","a",null,{"href":"http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=took%20advantage%20of%20the%20many,prune%20in%20the%20exponential%20complexity","children":"http://www.p-cos.net/documents/vub-prog-tr-06-15.pdf#:~:text=took%20advantage%20of%20the%20many,prune%20in%20the%20exponential%20complexity"}]]}]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Herring's Portfolio"}],["$","meta","3",{"name":"description","content":"A portfolio showcasing my journey in AI and human intelligence research"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
